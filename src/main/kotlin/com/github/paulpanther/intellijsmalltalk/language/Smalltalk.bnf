{
  parserClass="com.github.paulpanther.intellijsmalltalk.language.SmalltalkParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Smalltalk"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.paulpanther.intellijsmalltalk.language.psi"
  psiImplPackage="com.github.paulpanther.intellijsmalltalk.language.psi.impl"

  elementTypeHolderClass="com.github.paulpanther.intellijsmalltalk.language.psi.SmalltalkTypes"
  elementTypeClass="com.github.paulpanther.intellijsmalltalk.language.SmalltalkElementType"
  tokenTypeClass="com.github.paulpanther.intellijsmalltalk.language.SmalltalkTokenType"

  psiImplUtilClass="com.github.paulpanther.intellijsmalltalk.language.SmalltalkPsiImplUtil"

  extends(".*statement")=statement
  tokens=[
    LINE_TERMINATOR='regexp:\r|\n|\r\n'
    WHITE_SPACE='regexp:\s+'
    IDENTIFIER='regexp:[a-zA-Z_]\w*'
    NUMBER='regexp:\d+'
    KEYWORD='regexp:[a-zA-Z_]+:'
    STRING="regexp:'[^']*'"
    BINARY_OPERATOR="regexp:[*+\\\-/~<>@=,%&?!]+"
    COMMENT='regexp:"[^"]*"'

    STATEMENT_SEPERATOR='.'
    PARENTHESIS_START='('
    PARENTHESIS_END=')'
    ASSIGNMENT_OPERATOR=':='
    RETURN_OPERATOR='^'
    BLOCK_VARIABLE_SEPERATOR='|'
    BLOCK_START='['
    BLOCK_END=']'
  ]
}

file ::= method

multi_statement ::= statement (STATEMENT_SEPERATOR statement)*

parenthesized_expression ::= PARENTHESIS_START expression PARENTHESIS_END

statement ::= unary_message | binary_message | keyword_message | expression | return | COMMENT

assignment ::= identifier_usage ASSIGNMENT_OPERATOR expression

expression ::= assignment | primary

return ::= RETURN_OPERATOR expression

method ::= selector temporaries? statement_body {
  methods=[getVariables]
}

private selector ::= unary_selector | keyword_selector

unary_selector ::= IDENTIFIER
keyword_selector ::= (KEYWORD IDENTIFIER)+

temporaries ::= BLOCK_VARIABLE_SEPERATOR variable+ BLOCK_VARIABLE_SEPERATOR

variable ::= IDENTIFIER {
  mixin="com.github.paulpanther.intellijsmalltalk.language.SmalltalkNamedElementImpl"
  implements="com.github.paulpanther.intellijsmalltalk.language.SmalltalkNamedElement"
  methods=[getNameIdentifier getName setName]
}

unary_message ::= expression IDENTIFIER
binary_message ::= expression BINARY_OPERATOR expression
keyword_message ::= expression (KEYWORD expression)+

private primary ::= identifier_usage
    | parenthesized_expression
    | NUMBER
    | STRING
    | block
    | nil
    | true
    | false
    | self
    | super

statement_body ::= multi_statement? STATEMENT_SEPERATOR?

block ::= BLOCK_START block_arguments statement_body BLOCK_END

block_arguments ::= block_argument*

block_argument ::= (IDENTIFIER BLOCK_VARIABLE_SEPERATOR)*

identifier_usage ::= IDENTIFIER {
  methods=[getReference]
}
